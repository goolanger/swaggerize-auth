// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package auth generated by go-bindata.// sources:
// pkg/auth/html/mail/activation.tmpl
// pkg/auth/html/mail/base.tmpl
// pkg/auth/html/mail/recovery.tmpl
// pkg/auth/html/views/base.tmpl
// pkg/auth/html/views/login.tmpl
// pkg/auth/html/views/message.tmpl
// pkg/auth/html/views/recovery.tmpl
// pkg/auth/html/views/register.tmpl
// pkg/auth/html/views/state.tmpl
package auth

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pkgAuthHtmlMailActivationTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\x31\x0a\x02\x41\x0c\x05\xd0\x7e\x4f\xf1\x99\x03\x68\x2f\xeb\x82\xbd\x95\x37\x18\x93\x2c\x06\x21\x81\x21\x2b\x0c\x21\x77\x17\xc4\xfa\xf1\x32\x59\x76\x35\x41\x7b\x3a\xcf\x56\xb5\x00\xc0\x8d\x42\x3f\x3d\x04\xd3\x8f\x81\x4e\xe4\x87\xc5\xe5\x47\x6b\xc7\x6b\xc8\x7e\x6d\x99\xa7\x87\xb0\x0e\xa1\xa8\x6a\xdb\xbf\xa8\x1b\xee\x6a\xef\xf5\xdc\xb7\x25\x53\x8c\xab\xbe\x01\x00\x00\xff\xff\xbf\x3f\x58\x4e\x64\x00\x00\x00")

func pkgAuthHtmlMailActivationTmplBytes() ([]byte, error) {
	return bindataRead(
		_pkgAuthHtmlMailActivationTmpl,
		"pkg/auth/html/mail/activation.tmpl",
	)
}

func pkgAuthHtmlMailActivationTmpl() (*asset, error) {
	bytes, err := pkgAuthHtmlMailActivationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/auth/html/mail/activation.tmpl", size: 100, mode: os.FileMode(438), modTime: time.Unix(1600402845, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgAuthHtmlMailBaseTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\x3d\x0b\xc2\x30\x10\x40\xf7\xfc\x8a\x33\xb3\x35\xb8\x39\x24\x59\xfc\x58\x75\x68\x07\xc7\x98\x1c\xf4\x30\x49\x4b\x7b\xb4\x48\xe9\x7f\x97\x5a\x44\xa7\xe3\xdd\x3b\x8e\xa7\x37\xa7\xeb\xb1\xbc\xdf\xce\x50\x73\x8a\x56\xe8\xef\x40\x17\xac\x00\x00\xd0\x09\xd9\x81\xaf\x5d\xd7\x23\x1b\x59\x95\x97\xe2\x20\x41\xfd\xcb\xec\x12\x1a\x39\x10\x8e\x6d\xd3\xb1\x04\xdf\x64\xc6\xcc\x46\x8e\x14\xb8\x36\x01\x07\xf2\x58\x7c\x60\x0b\x94\x89\xc9\xc5\xa2\xf7\x2e\xa2\xd9\xff\x5e\x31\x71\x44\x5b\x45\x7a\x22\xb1\x56\x2b\x0a\xad\xd6\x14\xfd\x68\xc2\xcb\x8a\x69\x62\x4c\x6d\x74\x8c\x20\x97\x8d\x84\xdd\x3c\x0b\xad\x56\xbb\x5c\x2f\xfd\xef\x00\x00\x00\xff\xff\x03\x07\x4a\x55\xd6\x00\x00\x00")

func pkgAuthHtmlMailBaseTmplBytes() ([]byte, error) {
	return bindataRead(
		_pkgAuthHtmlMailBaseTmpl,
		"pkg/auth/html/mail/base.tmpl",
	)
}

func pkgAuthHtmlMailBaseTmpl() (*asset, error) {
	bytes, err := pkgAuthHtmlMailBaseTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/auth/html/mail/base.tmpl", size: 214, mode: os.FileMode(438), modTime: time.Unix(1600402845, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgAuthHtmlMailRecoveryTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xca\x31\x0a\xc2\x60\x0c\x05\xe0\xbd\xa7\x78\xe4\x00\xba\x4b\xed\xe2\xea\xd4\x1b\xfc\x36\xaf\x18\x5a\x52\x88\x45\x28\x21\x77\x17\x84\xce\xdf\x97\xa9\x9c\xcd\x09\x79\x6d\x7a\x48\x55\x07\x00\x8f\xa0\xd2\x77\x6b\xeb\x07\xc1\x69\xfb\x32\x0e\xac\xe6\xcb\xed\xcf\x7d\xc3\x3b\x38\xdf\x25\xf3\x32\x52\x2d\x38\xed\x55\x32\x8c\x67\x7d\x9a\x2f\xfd\xb5\x0d\x5d\x26\x5d\xab\x7e\x01\x00\x00\xff\xff\x67\xce\x68\x92\x66\x00\x00\x00")

func pkgAuthHtmlMailRecoveryTmplBytes() ([]byte, error) {
	return bindataRead(
		_pkgAuthHtmlMailRecoveryTmpl,
		"pkg/auth/html/mail/recovery.tmpl",
	)
}

func pkgAuthHtmlMailRecoveryTmpl() (*asset, error) {
	bytes, err := pkgAuthHtmlMailRecoveryTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/auth/html/mail/recovery.tmpl", size: 102, mode: os.FileMode(438), modTime: time.Unix(1600402845, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgAuthHtmlViewsBaseTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x91\x3f\x6f\xe3\x30\x0c\xc5\xf7\xfb\x14\x3c\xcd\x91\x73\xb7\x75\xb0\x02\x04\x05\x3a\x76\x28\x1a\xa0\x2b\x6d\xb1\x31\x01\xfd\xab\x4d\x27\x0d\x04\x7d\xf7\x22\x56\xdb\x24\xad\xa6\xc7\x1f\xf5\x08\xe2\x31\x67\xb0\xf4\xca\x81\x40\x75\x38\x91\x82\x52\xfe\x00\x00\xb4\x7f\x6d\xec\xe5\x94\x08\x06\xf1\x6e\x53\xd9\x59\x82\xc3\xb0\x37\x8a\x82\xfa\x82\x84\xb6\xca\xa5\xf4\x24\x08\xfd\x80\xe3\x44\x62\xd4\xee\xf9\x41\xdf\xa9\x9f\xed\x80\x9e\x8c\x3a\x30\x1d\x53\x1c\x45\x7d\x77\xeb\xeb\x63\x10\x0a\x62\xd4\x91\xad\x0c\xc6\xd2\x81\x7b\xd2\x4b\xb1\x82\x79\xa2\x51\x4f\x3d\x3a\xec\x1c\x99\x10\x57\xc0\x81\x85\xd1\x2d\x90\xcc\xff\xe6\xdf\x0a\x3c\xbe\xb3\x9f\xfd\x0d\xe2\x70\x8b\x7e\x2d\x35\x88\x24\x4d\x6f\x33\x1f\x8c\x7a\xd1\xbb\xad\xbe\x8f\x3e\xa1\x70\xe7\x48\x5d\x76\x62\x32\x64\xf7\x74\xed\x16\x16\x47\x9b\x9c\x85\x7c\x72\x28\x04\x0a\x7b\xe1\x18\x14\x34\xa5\x80\x86\x9c\x9b\xa7\x38\x0b\x8d\xcd\x36\xa5\x47\xf4\x54\x4a\xbb\xae\xa6\x9a\xe0\xfa\x12\x61\xdb\x45\x7b\xaa\xf2\x7a\xe0\x99\x2e\xe3\x3e\x0d\x97\x5f\xed\xba\xde\x27\x67\xa0\x60\xa1\x94\x8f\x00\x00\x00\xff\xff\x56\x39\x31\xb5\xd1\x01\x00\x00")

func pkgAuthHtmlViewsBaseTmplBytes() ([]byte, error) {
	return bindataRead(
		_pkgAuthHtmlViewsBaseTmpl,
		"pkg/auth/html/views/base.tmpl",
	)
}

func pkgAuthHtmlViewsBaseTmpl() (*asset, error) {
	bytes, err := pkgAuthHtmlViewsBaseTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/auth/html/views/base.tmpl", size: 465, mode: os.FileMode(438), modTime: time.Unix(1600402845, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgAuthHtmlViewsLoginTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\x4f\x8f\xda\x30\x10\xc5\xef\x7c\x8a\x91\xef\x0d\xda\x7b\x42\x0f\xfd\x23\xad\xb4\xaa\x10\xab\x9e\x91\x89\x27\x64\x54\xc7\x8e\xec\x09\x5b\xe4\xfa\xbb\x57\x36\x09\x81\x55\xda\xe5\xc6\xfc\x79\xbf\xf7\x06\x39\x21\x30\x76\xbd\x96\x8c\x20\x0e\xd2\xa3\x80\x22\xc6\xd5\x2a\x04\x85\x0d\x19\x04\x21\x6b\x26\x6b\x44\x8c\x2f\xf6\x48\x26\x04\x34\xea\x7e\xe1\x60\xd5\x59\xc4\xb8\x02\x00\x28\xdb\xa7\x4d\xde\x2b\xd7\xed\xd3\xe6\xd2\x6a\xac\xeb\xa0\x43\x6e\xad\xaa\x44\x6f\x3d\x8b\xcb\x20\x0f\xb5\x3c\xa0\x86\xc6\xba\x4a\x60\x27\x49\x7f\x6a\x08\xb5\x12\x9b\x6f\xa9\x28\xd7\x79\x7c\xb3\x4e\xa6\x1f\x18\xf8\xdc\x63\x25\x18\x7f\xb3\x00\x23\x3b\xac\xc4\xe0\xd1\xa5\x5f\x02\x7a\x2d\x6b\x6c\xad\x56\x38\x21\x05\x90\x7a\x47\x5f\xf4\xef\xa5\xf7\x6f\xd6\xa9\x69\x69\x3b\xd6\xff\x4f\x31\xa9\xa6\x24\x73\x7d\x97\x64\x6e\xa7\x30\xef\xad\x56\xcb\xec\x96\x94\x42\x33\x91\x1d\xfa\xde\x1a\x8f\xfb\x34\x14\x70\x92\x7a\xc0\x4a\xd4\x56\xa1\xf8\x47\xb6\x7b\x7d\xad\x09\x0d\xef\x49\x5d\xb5\x21\x14\x5b\xe9\x64\xe7\x8b\x2f\x79\xf6\xfc\x35\xc6\xc7\x58\x0e\x15\x39\xac\x79\x3f\x38\x5a\xc0\xed\xc6\xf1\xcf\xdd\xf3\xa3\x44\x5f\xdb\x9b\xab\x66\xd4\x6b\xea\x3f\x0c\x61\xc9\x8b\x90\xd4\xcf\x90\x65\x8a\x1f\x0e\x1d\xf1\x55\x98\x5f\xf0\xe8\x58\xae\xd3\xfb\x1d\x85\xa5\x84\xd6\x61\x93\xd1\x3b\x3b\x30\xba\xe2\x15\xbd\x27\x6b\x76\x78\x24\xcf\xe8\xb6\x92\xdb\x64\x34\xd5\xe5\x5a\x6e\xfe\x7c\xa0\xcd\xe9\x26\xe1\x77\xeb\x8e\x96\xe1\x6c\x07\x07\xd3\x33\xf9\x9c\x28\x63\x02\x45\xa7\xf9\xaf\x08\xc1\x49\x73\x44\x28\xb6\xce\x9e\x48\xa1\xf3\xe3\x77\x78\xbd\xf2\xc6\xf4\x85\xcc\xaf\xe4\x90\xaf\x83\x37\xe2\x16\x42\x28\x7e\xc8\x0e\x63\xcc\x06\x33\xf5\xf2\x8d\x5f\xce\xcf\x86\x63\xeb\x6f\x00\x00\x00\xff\xff\x9b\x2f\xc7\x5f\x2d\x04\x00\x00")

func pkgAuthHtmlViewsLoginTmplBytes() ([]byte, error) {
	return bindataRead(
		_pkgAuthHtmlViewsLoginTmpl,
		"pkg/auth/html/views/login.tmpl",
	)
}

func pkgAuthHtmlViewsLoginTmpl() (*asset, error) {
	bytes, err := pkgAuthHtmlViewsLoginTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/auth/html/views/login.tmpl", size: 1069, mode: os.FileMode(438), modTime: time.Unix(1601577976, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgAuthHtmlViewsMessageTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x91\xc1\x6e\xf2\x30\x10\x84\xef\x79\x8a\x91\x4f\xff\x7f\x81\x17\xa0\x48\x9c\x7a\xaa\xc4\xb5\xc7\x8d\x3d\x81\x88\xc4\x6e\xbd\x0e\x15\xb2\xf2\xee\x55\x42\x0a\x54\x05\xda\xaa\xb7\xac\xf2\xed\xa7\xf5\x4c\xce\x89\xed\x4b\x23\x89\x30\xa5\x28\x0d\x66\x7d\x5f\x14\x39\x3b\x56\xb5\x27\x8c\xd8\x54\x07\x6f\xfa\xfe\x89\xaa\xb2\x61\xce\xf4\xee\x2b\xb2\x97\x09\x5b\x79\x9c\x67\x34\xb5\xdf\x61\x2b\x8a\x92\xf4\x50\xfa\x84\x14\x70\x08\x5d\x04\x5b\xa9\x1b\x88\xb5\xa1\xf3\xe9\x8a\x35\xd2\x86\x3d\xe3\x61\x70\xe2\x63\xf8\x8b\x70\x3a\x8b\xce\xf4\xfd\xf3\xb0\x30\xa1\x93\xae\xf6\x1b\x9c\x90\xdb\xf7\x8c\xeb\x6b\x51\x7d\x0b\xd1\x21\x52\x99\xa0\x9d\xb5\x54\xad\xba\xa6\x39\x5c\xd9\x2c\x83\x1b\x5e\x51\x00\x40\xce\x75\x85\x7f\x7c\xc5\x6c\x2d\x51\x5a\x9d\xad\xc6\x7c\x3f\x85\xf8\x7f\x62\x8f\xfc\xb9\x9f\x0b\x64\x6c\xe9\xf8\x9f\x8d\x12\xf7\xa5\x74\xdf\x39\xe9\x7e\xaa\x3c\xd5\x72\xcb\x78\x02\x7e\x27\xbc\x73\xe3\x99\xb8\x54\x8e\x29\x0f\xdf\x0b\xc1\x36\xb2\x7a\x30\x73\xb3\x7c\x0c\x28\xc5\xee\xb0\x0d\x2d\x17\x73\x59\x16\x13\xf8\x1e\x00\x00\xff\xff\x9e\xee\x26\x57\xe7\x02\x00\x00")

func pkgAuthHtmlViewsMessageTmplBytes() ([]byte, error) {
	return bindataRead(
		_pkgAuthHtmlViewsMessageTmpl,
		"pkg/auth/html/views/message.tmpl",
	)
}

func pkgAuthHtmlViewsMessageTmpl() (*asset, error) {
	bytes, err := pkgAuthHtmlViewsMessageTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/auth/html/views/message.tmpl", size: 743, mode: os.FileMode(438), modTime: time.Unix(1600402845, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgAuthHtmlViewsRecoveryTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\xcd\x8e\xab\x30\x0c\x85\xf7\x3c\x85\xe5\x7d\x8b\xba\x07\xd6\x77\x59\xf5\xce\x0b\x18\x62\x44\x34\x49\x8c\x12\xd3\xaa\x8a\xf2\xee\x23\x5a\xa6\x3f\x1a\x75\x87\x7d\xce\xf7\x61\x29\x39\x2b\xfb\xd9\x91\x32\x60\x4f\x89\x11\xf6\xa5\x54\x55\xce\x86\x47\x1b\x18\x90\x06\xb5\x12\xb0\x94\x13\x0f\x72\xe6\x78\xcd\x99\x83\x79\xef\xf4\x62\xae\x58\x4a\x05\x00\xd0\x4c\x87\xee\xc4\x89\x15\x8e\x94\xd2\x45\xa2\x69\xea\xe9\xd0\xdd\xb3\x51\xa2\x07\xcf\x3a\x89\x69\x71\x96\xa4\x78\x0f\x6e\xa1\xa3\x9e\x1d\x8c\x12\x5b\x9c\x37\x74\x37\x5a\x76\x06\xbb\xa7\xea\x56\x7a\x81\x6c\x98\x17\x05\xbd\xce\xfc\xa4\x10\xac\xf9\xe3\x80\xc1\x51\x4a\x2d\xae\x27\xec\x6e\x14\x42\x20\xff\x86\xcd\x8e\x06\x9e\xc4\x19\x8e\x2d\x72\x50\x8e\x10\xf8\x02\x8f\xc2\x87\xff\x4e\xd6\x18\x0e\xbf\x3a\x95\xef\x75\x38\x93\x5b\xb8\xc5\x9c\xf7\x47\x8a\xe4\xd3\xfe\x6b\xdd\x97\xf2\x49\x92\x96\xde\x5b\x7d\x70\xff\xb7\xf1\xf5\xea\x7e\x51\x95\xb0\x09\x9a\x7a\xdd\x6d\xdf\x04\x53\xe4\xb1\xc5\x1a\xbb\x7f\xe2\xb9\xa9\xa9\xab\xb6\x77\xfa\x09\x00\x00\xff\xff\xda\xa5\x65\x59\xe1\x01\x00\x00")

func pkgAuthHtmlViewsRecoveryTmplBytes() ([]byte, error) {
	return bindataRead(
		_pkgAuthHtmlViewsRecoveryTmpl,
		"pkg/auth/html/views/recovery.tmpl",
	)
}

func pkgAuthHtmlViewsRecoveryTmpl() (*asset, error) {
	bytes, err := pkgAuthHtmlViewsRecoveryTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/auth/html/views/recovery.tmpl", size: 481, mode: os.FileMode(438), modTime: time.Unix(1600402845, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgAuthHtmlViewsRegisterTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\xbf\x6e\xfa\x30\x10\xc7\xf7\x3c\xc5\xe9\x76\x88\xd8\x93\x48\xbf\xe1\xb7\x75\x40\xf4\x09\x1c\x7c\xc1\x96\x1c\x5f\x64\x9f\xdb\x52\xcb\xef\x5e\x05\x8c\x80\x4a\x65\xcb\x7d\xff\xe5\x33\x38\x67\xa1\x79\x71\x4a\x08\x70\x54\x91\x10\xb6\xa5\x34\x4d\xce\x9a\x26\xeb\x09\x50\x1d\xc5\xb2\xc7\x52\x0e\x74\xb2\x51\x28\xe4\x4c\x5e\x3f\x67\x46\xd6\x67\x2c\xa5\x01\x00\xe8\xcc\x6e\xb8\x45\xbb\xd6\xec\x86\xab\x3a\x71\x98\x61\x26\x31\xac\x7b\x5c\x38\x0a\x5e\x8d\x8b\xe9\xd4\x48\x0e\x26\x0e\x3d\xd2\xac\xac\xdb\x4c\x96\x9c\xc6\xe1\xff\x7a\x74\xed\xc5\x7e\x88\x5b\xbf\x24\x01\x39\x2f\xd4\xa3\xd0\x97\x20\x58\xfd\xdc\x04\xaf\x66\xaa\x12\xc2\xe2\xd4\x91\x0c\x3b\x4d\xa1\xc7\xb5\x06\x67\x4e\x01\xaa\x7b\x74\x2a\xc6\x1e\x57\xc0\xcd\x65\xf9\x0f\xb2\x45\xc5\xf8\xc9\x41\xdf\xe0\xf6\xf5\x7e\xcd\x77\x6b\x5d\x19\x7f\x6d\x54\xcc\x7b\xe6\x89\xf4\x2e\xbf\x44\x7c\xfc\x5b\x4c\xe3\x6c\x05\xe1\x43\xb9\x44\x3d\xbe\xd7\xf3\xb1\x3f\x26\x11\xf6\x75\xa0\x6b\x57\xad\x7e\x2b\x30\x81\xa6\x1e\x73\xde\x1e\x38\x09\x85\xed\xbf\x24\x86\x83\xfd\xa6\xbd\x12\x53\x0a\x0e\x6f\x7c\xb2\xbe\x6b\xd5\xd0\xd4\x57\xf0\x13\x00\x00\xff\xff\x75\x0d\xed\xde\x3f\x02\x00\x00")

func pkgAuthHtmlViewsRegisterTmplBytes() ([]byte, error) {
	return bindataRead(
		_pkgAuthHtmlViewsRegisterTmpl,
		"pkg/auth/html/views/register.tmpl",
	)
}

func pkgAuthHtmlViewsRegisterTmpl() (*asset, error) {
	bytes, err := pkgAuthHtmlViewsRegisterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/auth/html/views/register.tmpl", size: 575, mode: os.FileMode(438), modTime: time.Unix(1600402845, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgAuthHtmlViewsStateTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\xbd\x6e\xeb\x30\x0c\x85\x77\x3f\x05\xc1\x3d\x36\xb2\xdb\x06\x32\xdc\xed\x0e\x41\xfb\x04\x74\x44\x57\x02\xf4\x63\xc8\x54\xd1\x54\xd0\xbb\x17\x76\x14\x34\x41\xdb\x4d\xe4\xc7\xc3\x43\x1c\xe5\x2c\xec\x16\x4b\xc2\x80\x13\xad\x8c\xd0\x96\xd2\x34\x39\x2b\x9e\x8d\x67\x40\xba\x88\x09\x1e\x4b\x39\xed\x8f\x9c\xd9\xab\xe7\x89\x29\xa8\x2b\x96\xd2\x00\x00\xf4\xfa\x38\xe6\xdc\x9e\x29\x92\x5b\xdb\x9b\xa4\x94\xbe\xd3\xc7\xf1\xc6\xe7\x10\x1d\x38\x16\x1d\xd4\x80\x4b\x58\x05\x6f\x60\x87\x96\x26\xb6\x30\x87\x38\x20\x3b\x32\xf6\x30\x1b\xb6\x0a\xc7\x7f\x5b\xd1\x77\x3b\x7e\x18\x37\x7e\x49\x02\x72\x5d\x78\x40\xe1\x0f\x41\x30\xea\x59\x09\x9e\x1c\xd7\x16\xc2\x62\xe9\xc2\x3a\x58\xc5\x71\xc0\x4d\x06\xd7\x90\x22\x54\x7a\xb1\xb4\xae\x03\x6e\x07\x1e\xf6\xcd\x08\xef\x64\x13\x0f\x88\x63\xf3\xbb\xa9\x36\x4a\xb1\xbf\xbb\xd4\xa4\xee\xaa\x9f\x31\x60\xf7\xd7\xa2\x35\x4d\xce\x7c\x1b\xbe\xd6\xf2\xf1\xa4\x29\x89\x04\x5f\xd3\xea\xbb\xad\x57\xdf\x04\x3a\xf2\xbc\x1b\xbe\x84\x24\x1c\xdb\x53\x12\x1d\xa2\xf9\xe4\x33\x89\x2e\x05\xc7\xff\xe1\xcd\xf8\xbe\xa3\xb1\xa9\xff\xf7\x15\x00\x00\xff\xff\x9f\xf3\x92\x93\xf7\x01\x00\x00")

func pkgAuthHtmlViewsStateTmplBytes() ([]byte, error) {
	return bindataRead(
		_pkgAuthHtmlViewsStateTmpl,
		"pkg/auth/html/views/state.tmpl",
	)
}

func pkgAuthHtmlViewsStateTmpl() (*asset, error) {
	bytes, err := pkgAuthHtmlViewsStateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/auth/html/views/state.tmpl", size: 503, mode: os.FileMode(438), modTime: time.Unix(1600402845, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pkg/auth/html/mail/activation.tmpl": pkgAuthHtmlMailActivationTmpl,
	"pkg/auth/html/mail/base.tmpl":       pkgAuthHtmlMailBaseTmpl,
	"pkg/auth/html/mail/recovery.tmpl":   pkgAuthHtmlMailRecoveryTmpl,
	"pkg/auth/html/views/base.tmpl":      pkgAuthHtmlViewsBaseTmpl,
	"pkg/auth/html/views/login.tmpl":     pkgAuthHtmlViewsLoginTmpl,
	"pkg/auth/html/views/message.tmpl":   pkgAuthHtmlViewsMessageTmpl,
	"pkg/auth/html/views/recovery.tmpl":  pkgAuthHtmlViewsRecoveryTmpl,
	"pkg/auth/html/views/register.tmpl":  pkgAuthHtmlViewsRegisterTmpl,
	"pkg/auth/html/views/state.tmpl":     pkgAuthHtmlViewsStateTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"pkg": &bintree{nil, map[string]*bintree{
		"auth": &bintree{nil, map[string]*bintree{
			"html": &bintree{nil, map[string]*bintree{
				"mail": &bintree{nil, map[string]*bintree{
					"activation.tmpl": &bintree{pkgAuthHtmlMailActivationTmpl, map[string]*bintree{}},
					"base.tmpl":       &bintree{pkgAuthHtmlMailBaseTmpl, map[string]*bintree{}},
					"recovery.tmpl":   &bintree{pkgAuthHtmlMailRecoveryTmpl, map[string]*bintree{}},
				}},
				"views": &bintree{nil, map[string]*bintree{
					"base.tmpl":     &bintree{pkgAuthHtmlViewsBaseTmpl, map[string]*bintree{}},
					"login.tmpl":    &bintree{pkgAuthHtmlViewsLoginTmpl, map[string]*bintree{}},
					"message.tmpl":  &bintree{pkgAuthHtmlViewsMessageTmpl, map[string]*bintree{}},
					"recovery.tmpl": &bintree{pkgAuthHtmlViewsRecoveryTmpl, map[string]*bintree{}},
					"register.tmpl": &bintree{pkgAuthHtmlViewsRegisterTmpl, map[string]*bintree{}},
					"state.tmpl":    &bintree{pkgAuthHtmlViewsStateTmpl, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
