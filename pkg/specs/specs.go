// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package specs generated by go-bindata.// sources:
// swagger.yaml
package specs

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x4d\x73\xe3\x36\x0f\xbe\xeb\x57\x60\xfc\x9e\x2d\xf9\x4d\xdb\x43\xd5\x4b\x77\x36\x7b\xc8\x6c\xbb\xe9\xd4\xb9\x75\x3a\x1e\x9a\x82\x65\x6e\x24\x52\x0b\x42\x76\xb2\x9d\xfe\xf7\x0e\x29\xc9\x96\xbf\xe4\xd8\x51\x36\x9e\x36\x3a\x24\x12\x09\x40\x24\xf0\xe0\x01\x49\xeb\x7f\xf0\xde\x24\x08\x29\x6a\x24\xc1\x98\xc0\xf4\x11\xec\x52\xa4\x29\x92\xfa\x8a\x3f\xc1\xf5\x2d\x7c\xba\xbd\x83\x0f\xd7\x37\x77\x61\x10\x24\x38\x53\x5a\xb1\x32\xda\xc6\x01\xc0\xfb\x4c\xa8\xdc\xdf\x01\x14\x64\x0a\x24\x56\x58\x3f\x03\xa8\xa4\xb9\x03\xe0\xc7\x02\x63\xb0\x4c\x4a\xa7\x75\xa3\x95\xa6\x58\x0b\xef\x11\xa9\x1a\xcc\xf4\x33\x4a\x0e\x94\x9e\x19\x27\x9b\x29\x89\xda\x62\xa5\xa6\x45\x8e\x31\xbc\x2b\x84\x9c\x23\x5c\x85\x23\xdf\x58\x52\x16\xc3\x9c\xb9\x88\xa3\x68\xb9\x5c\x86\xc2\x77\x87\x86\xd2\xa8\x56\xb6\xd1\x2f\x37\xef\x3f\x7c\x1a\x7f\x18\x5e\x85\xa3\x70\xce\x79\x16\x00\x48\xa3\x59\x48\xde\x30\x9c\x8b\x92\x1e\x37\x8d\xda\x38\x8a\x84\x6f\x4f\x94\xf8\x1a\xa6\x8a\xe7\xe5\x34\x54\xc6\x4b\x61\x2e\x54\x16\x43\xd5\x5f\xce\x7f\x4e\xdd\x73\x28\x4d\x1e\x00\x24\x68\x25\xa9\xc2\xf9\x2e\x86\x5b\x51\xf2\xdc\x8d\x18\x44\xa1\x80\x70\x86\x84\x5a\x62\x00\xc0\x8a\x33\xf7\xea\x92\xe7\xa8\x59\x49\xe1\x14\x02\x80\x05\x92\xf5\xaa\xa3\xf0\xff\x7e\xa2\x8c\x94\xdb\xdb\xd9\x18\x69\xa1\x24\xc6\x30\x18\x04\x85\xe0\xb9\x77\x68\xe4\xcc\x47\xc6\xff\x75\x7f\x8c\x8b\x65\x35\xb3\x14\xb9\x71\xb9\x8b\x97\x37\x7f\x93\x54\x2f\xf4\x62\x75\x67\x21\x48\xe4\xc8\x48\xab\x08\x0d\x41\xe9\x18\xbe\x94\x58\xbb\x64\xed\x27\xc2\x44\x11\x4a\x9e\x94\xa4\x56\x5d\x84\x5f\x4a\x45\x98\xc4\xc0\x54\x62\x17\x10\x0e\x1b\x96\x99\x42\xcd\x13\x95\xf4\x6a\xd5\xb2\x60\xec\xd7\xa2\x83\xf2\x19\x16\x0b\x32\x49\x29\xb1\xe5\x62\xc6\x07\x8e\x6a\x44\x56\xb6\x6c\x61\x1c\x64\xd7\x79\x32\xb8\x1a\x8d\x06\xeb\xc7\x6d\x64\xdd\xaf\x05\x7f\xe8\x12\x54\x9a\x91\xb4\xc8\xc0\x22\x2d\x90\x00\x89\x0c\xb5\x84\xad\x9c\x63\x2e\xda\xea\xfb\xb3\x18\x65\x49\x8a\x1f\x63\xf8\xe3\xcf\xba\x89\x45\xda\x9a\x91\x87\x7a\xc5\x10\xc6\xae\xb0\x27\x8d\xb6\x65\xde\x9e\xb9\x28\x8a\xac\x86\x7b\xf4\x30\x5c\x2e\x97\xc3\x99\xa1\x7c\x58\x52\x86\x5a\x9a\x04\x93\x4e\xd4\x8e\xcb\x69\xae\xb8\x03\xbb\xa8\xcb\x7c\x3d\x99\x21\x38\x93\xad\x47\x36\xf7\xa8\x57\xcf\x2e\xce\xee\xed\xd7\x82\xc5\x0e\xd6\xab\x80\x4c\x9c\x2f\xce\x06\xd1\x41\xe3\x3d\x24\xd2\x01\xdb\xcf\xcf\xa5\x03\x86\x9f\x97\x4e\x87\x8c\x9e\x99\x51\x9d\x46\x4b\xeb\x10\x9f\xf7\x6e\xb7\x10\xd6\x2e\x0d\x9d\xe3\xd9\x93\xf3\x7b\x05\x7f\xb0\xa5\x94\x68\xed\x85\xa6\x7b\xbb\x04\x15\x64\x16\x2a\x41\xb2\xd1\x5f\xcd\xed\xdf\xdd\xd5\xe8\xb7\x5a\xec\x48\x31\x72\x05\x6f\x3b\x16\x9b\x9a\x3d\xd5\xa1\x36\x59\xbc\x66\x09\xda\x07\x97\x8b\x0d\xbb\xe7\xd4\xf8\xa5\xa8\xff\xae\xc5\xd8\x4f\x21\xfc\x9d\x24\x1d\x42\xb3\x34\xf2\x36\x27\x5b\x15\xa1\xe6\x4b\x49\x98\xb8\x85\x98\xc8\x6c\xab\x93\x70\x46\x68\xe7\x93\x27\x97\x8d\x94\x84\xe6\xcd\x9a\xf1\x7c\x02\x3f\xd3\x82\x45\x49\xc8\x3d\x51\x73\x2f\x25\xee\xe4\x89\xb4\x43\xf5\xec\x2a\xb0\xd7\x80\x53\x16\xbc\x87\xdb\x4f\xa9\x03\xa7\x3b\x67\x1f\xac\x5e\xb6\x6c\xec\xe7\x80\xdd\xdd\x5c\x73\x09\xaf\x3e\x69\x25\x77\xfb\xda\x33\xd6\xe6\xc2\x87\x42\x11\xda\x89\xda\xa3\xd6\x78\x5b\x69\xfe\xee\xea\x80\x51\x47\x65\x29\xd2\x56\xef\x86\xcb\x4e\x1a\x8f\xc7\xf1\x49\x1a\xfe\x1d\x3e\x89\x4f\x50\xdb\xd8\xc5\x36\x8d\x97\x48\xda\xde\x1f\x51\xb3\xcf\x3e\x5c\x9b\x6f\xf4\xcc\x34\xbc\xbb\xb3\x7f\x69\x53\xf9\x67\x6b\xf4\xd9\x78\xbd\x3f\x1b\xa0\xd5\x26\xfc\x94\xb8\xb6\x0f\x2a\x9e\x20\xbe\x40\x52\x33\x85\xc9\xa4\xf3\x4d\x53\x63\x32\x14\xfa\xd2\xb0\xb0\x8a\x94\x0f\x77\x72\x10\x1b\x63\x7f\x3a\xb3\x06\x07\x5a\xeb\x62\x4a\x28\xcd\x02\xe9\xb1\x1b\x22\xbf\xd7\x52\x47\x96\x6f\xfb\x56\x46\x9b\xd4\xf7\xba\x5b\xe9\x8f\x17\x96\xaf\xe3\x2a\x08\x2f\xb5\xa2\x6a\xa2\x76\x74\x2f\xdd\x4b\x6d\xec\x63\x19\xdd\x1f\x58\xfa\xe2\xad\x0b\xc6\xcc\x76\x22\xa7\xca\x32\xd2\xb1\x44\xae\xa4\xde\x92\xac\xbf\x24\xab\x3c\x7a\x34\xc9\x3a\x72\xc9\xd7\x9d\xb3\x13\xa9\xff\x04\xfd\x36\xe9\xf4\xfd\xe8\xc7\xc3\x82\xd2\xe8\x59\xa6\x2e\x6e\x85\x75\x2c\xfb\x22\x21\x59\x2d\x04\x1f\x39\x9c\x6f\x40\xf3\xae\x96\xfe\x86\x75\xf5\xdf\x94\xd0\x9b\x31\xf0\x67\x30\xdd\x7e\x1f\x73\xb7\xb3\xb7\xcf\x18\xea\x68\x2a\xa3\x5b\x8d\xb4\xb9\x18\x82\x83\x21\x72\xda\xe6\x6d\xed\xf3\x2a\xb4\xec\x23\xfd\x3a\x9c\x7c\xb1\x20\xfa\xcf\xad\x89\x3c\x23\x44\x39\x5a\x2b\xd2\xa7\x30\xc3\xaf\x95\x64\xef\x04\xb1\x92\xc3\x64\x57\x0c\x93\x37\x22\xe9\x23\xf8\xde\x9e\x9b\xc7\xb0\xfa\x5d\xbf\xfe\x1f\xac\x77\xca\x43\x98\xa2\x20\x24\x6f\xaa\x69\xbe\xde\xfc\x02\xa2\x96\x08\x9a\x70\xcc\x51\x34\x3f\x3e\xd4\xdf\x10\xb4\xcf\x98\x83\xf5\xa0\x45\xa1\x3e\xa2\x0b\x5c\xbd\x0f\x0f\x76\x03\xda\x04\x73\x7d\xde\xb6\xab\x5f\x7f\xaa\x11\xc3\xe0\x2a\x1c\x0d\x82\x6a\xaa\xc3\x5a\xb5\x39\xdf\x39\xf4\xe9\x41\x7b\x68\x2e\xf6\x6c\xa4\xc9\x00\x75\x52\x18\xa5\xd9\x86\x2b\x43\xeb\x84\xd9\x30\x55\x37\xd7\x78\xb3\x8e\x1a\xfd\xe9\x6a\x5b\xb3\x39\x46\xd8\x33\x86\xea\x03\x90\xe0\x9f\x00\x00\x00\xff\xff\xdf\x61\x37\x3e\x82\x22\x00\x00")

func swaggerYamlBytes() ([]byte, error) {
	return bindataRead(
		_swaggerYaml,
		"swagger.yaml",
	)
}

func swaggerYaml() (*asset, error) {
	bytes, err := swaggerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger.yaml", size: 8834, mode: os.FileMode(438), modTime: time.Unix(1601592821, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger.yaml": swaggerYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"swagger.yaml": &bintree{swaggerYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
