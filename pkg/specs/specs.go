// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package specs generated by go-bindata.// sources:
// swagger.yaml
package specs

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x4d\x73\xe3\x36\x0f\xbe\xeb\x57\x60\xfc\x9e\x2d\xf9\x4d\xdb\x43\xd5\x4b\x77\x36\x7b\xc8\x6c\xbb\xe9\xd4\xb9\x75\x3a\x1e\x9a\x82\x65\x6e\x24\x52\x0b\x42\x76\xb2\x9d\xfe\xf7\x0e\x29\xc9\x96\xbf\xe4\xd8\x51\x36\x9e\x36\x3e\x38\x16\x09\x40\x24\xf0\x3c\x00\xc9\xf0\x7f\xf0\xde\x24\x08\x29\x6a\x24\xc1\x98\xc0\xf4\x11\xec\x52\xa4\x29\x92\xfa\x8a\x3f\xc1\xf5\x2d\x7c\xba\xbd\x83\x0f\xd7\x37\x77\x61\x10\x24\x38\x53\x5a\xb1\x32\xda\xc6\x01\xc0\xfb\x4c\xa8\xdc\xff\x02\x28\xc8\x14\x48\xac\xb0\x7e\x06\x50\x49\xf3\x0b\x80\x1f\x0b\x8c\xc1\x32\x29\x9d\xd6\x8d\x56\x9a\x62\x2d\xbc\x47\xa4\x6a\x30\xd3\xcf\x28\x39\x50\x7a\x66\x9c\x6c\xa6\x24\x6a\x8b\x95\x9a\x16\x39\xc6\xf0\xae\x10\x72\x8e\x70\x15\x8e\x7c\x63\x49\x59\x0c\x73\xe6\x22\x8e\xa2\xe5\x72\x19\x0a\xdf\x1d\x1a\x4a\xa3\x5a\xd9\x46\xbf\xdc\xbc\xff\xf0\x69\xfc\x61\x78\x15\x8e\xc2\x39\xe7\x59\x00\x20\x8d\x66\x21\x79\xc3\x70\x2e\x4a\x7a\xdc\x34\x6a\xe3\x28\x12\xbe\x3d\x51\xe2\x6b\x98\x2a\x9e\x97\xd3\x50\x19\x2f\x85\xb9\x50\x59\x0c\x55\x7f\x39\xff\x39\x75\xcf\xa1\x34\x79\x00\x90\xa0\x95\xa4\x0a\xe7\xbb\x18\x6e\x45\xc9\x73\x37\x62\x10\x85\x02\xc2\x19\x12\x6a\x89\x01\x00\x2b\xce\xdc\xab\x4b\x9e\xa3\x66\x25\x85\x53\x08\x00\x16\x48\xd6\xab\x8e\xc2\xff\xfb\x89\x32\x52\x6e\x6f\x67\x63\xa4\x85\x92\x18\xc3\x60\x10\x14\x82\xe7\xde\xa1\x91\x33\x1f\x19\xff\xed\xbe\x8c\x8b\x65\x35\xb3\x14\xb9\x71\xb9\x8b\x97\x37\x7f\x93\x54\x2f\xf4\x62\x75\x67\x21\x48\xe4\xc8\x48\xab\x08\x0d\x41\xe9\x18\xbe\x94\x58\xbb\x64\xed\x27\xc2\x44\x11\x4a\x9e\x94\xa4\x56\x5d\x84\x5f\x4a\x45\x98\xc4\xc0\x54\x62\x17\x10\x0e\x1b\x96\x99\x42\xcd\x13\x95\xf4\x6a\xd5\xb2\x60\xec\xd7\xa2\x83\xf2\x19\x16\x0b\x32\x49\x29\xb1\xe5\x62\xc6\x07\x8e\x6a\x44\x56\xb6\x6c\x61\x1c\x64\xd7\x3c\x19\x5c\x8d\x46\x83\xf5\xe3\x36\xb2\xee\xd7\x82\x3f\x74\x09\x2a\xcd\x48\x5a\x64\x60\x91\x16\x48\x80\x44\x86\x5a\xc2\x56\xce\x31\x17\x6d\xf5\xfd\x2c\x46\x59\x92\xe2\xc7\x18\xfe\xf8\xb3\x6e\x62\x91\xb6\x66\xe4\xa1\x5e\x65\x08\x63\x57\xd8\x93\x46\xdb\x32\x6f\xcf\x5c\x14\x45\x56\xc3\x3d\x7a\x18\x2e\x97\xcb\xe1\xcc\x50\x3e\x2c\x29\x43\x2d\x4d\x82\x49\x27\x6a\xc7\xe5\x34\x57\xdc\x81\x5d\xd4\x65\xbe\x9e\xcc\x10\x9c\xc9\xd6\x23\x9b\x7b\xd4\xab\x67\x17\x67\xf7\xf6\x6b\xc1\x62\x07\xeb\x55\x40\x26\xce\x17\x67\x83\xe8\xa0\xf1\x1e\x88\x74\xc0\xf6\xf3\xb9\x74\xc0\xf0\xf3\xe8\x74\xc8\xe8\x99\x8c\xea\x34\x5a\x5a\x87\xf8\xbc\x77\xbb\x85\xb0\x76\x69\xe8\x1c\xcf\x9e\xcc\xef\x15\xfc\xc1\x96\x52\xa2\xb5\x17\x4a\xf7\x76\x09\x2a\xc8\x2c\x54\x82\x64\xa3\xbf\x9a\x9f\x7f\x77\x57\xa3\xdf\x6a\xb1\x23\xc5\xc8\x15\xbc\xed\x58\x6c\x6a\xf6\x54\x87\xda\xc9\xe2\x35\x4b\xd0\x3e\xb8\x5c\x6c\xd8\x7d\x4e\x8d\x5f\x2a\xf5\xdf\xb5\x32\xf6\x53\x12\xfe\x0e\x49\x87\xd0\x2c\x8d\xbc\xcd\xc9\x56\x45\xa8\xf3\xa5\x24\x4c\xdc\x42\x4c\x64\xb6\xd5\x49\x38\x23\xb4\xf3\xc9\x93\xcb\x46\x4a\x42\xf3\x66\xcd\x78\x7e\x02\x3f\xd3\x82\x45\x49\xc8\x3d\xa5\xe6\x5e\x4a\xdc\xc9\x13\x69\x87\xea\xd9\x55\x60\xaf\x01\xa7\x2c\x78\x4f\x6e\x3f\xa5\x0e\x9c\xee\x9c\x7d\xb0\x7a\xd9\xb2\xb1\x3f\x07\xec\xee\xe6\x9a\x8f\xf0\xea\x93\x16\xb9\xdb\x9f\x3d\x63\x6d\x3e\xf8\x50\x28\x42\x3b\x51\x7b\xd4\x1a\x6f\x2b\xcd\xdf\x5d\x1d\x30\xea\x52\x59\x8a\xb4\xd5\xbb\xe1\xb2\x93\xc6\xe3\x71\x7c\x92\x86\x7f\x87\x27\xf1\x09\x6a\x1b\xbb\xd8\xa6\xf1\x12\x93\xb6\xf7\x47\xd4\xec\xb3\x0f\xd7\xe6\x1b\x3d\x33\x4d\xde\xdd\xd9\xbf\xb4\x53\xf9\x67\x6b\xf4\xd9\x78\xbd\x3f\x1b\xa0\xd5\x26\xfc\x94\xb8\xb6\x0f\x2a\x9e\x20\xbe\x40\x52\x33\x85\xc9\xa4\xf3\x4d\x53\x63\x32\x14\xfa\xd2\xb0\xb0\x8a\x94\x0f\x77\x72\x10\x1b\x63\x7f\x3a\xb3\x06\x07\x5a\xeb\x62\x4a\x28\xcd\x02\xe9\xb1\x1b\x22\xbf\xd7\x52\x47\x96\x6f\xfb\x56\x46\x9b\xa9\xef\x75\xb7\xd2\x1f\x2f\x8c\xaf\xe3\x2a\x08\x2f\xb5\xa2\x6a\xa2\x76\x74\x2f\xdd\x4b\x6d\xec\x63\x19\xdd\x1f\x58\xfa\xca\x5b\x17\x8c\x99\x6d\x22\xa7\xca\x32\xd2\x31\x22\x57\x52\x67\x10\x39\x33\xa9\xd2\x0e\x71\x6f\xac\x7d\x61\xd6\x56\x21\x3a\xca\xda\x0e\x72\xfa\x42\x76\x36\x33\xfb\x67\xfc\xb7\xe1\xe7\xf7\xa3\x1f\x0f\x0b\x4a\xa3\x67\x99\xba\xb8\x25\xdb\x31\x3a\x47\x42\xb2\x5a\x08\x3e\x72\xda\xdf\x80\xe6\x5d\x2d\xfd\x0d\x0b\xf5\xbf\x89\xd0\x9b\x31\xf0\x87\x3a\xdd\x7e\x1f\x73\xb7\xb3\xb7\x0f\x2d\xea\x68\x2a\xa3\x5b\x8d\xb4\xb9\xba\x82\x83\x21\x72\xda\xe6\x6d\x31\xf5\x2a\x69\xd9\x47\xfa\x75\x72\xf2\xc5\x82\xe8\x3f\xb7\xc8\xf2\x19\x21\xca\xd1\x5a\x91\x3e\x25\x33\xfc\x5a\x49\xf6\x9e\x20\x56\x72\x98\xec\x8a\x61\xf2\x96\x48\xfa\x08\xbe\xb7\xe7\xe6\x31\xac\x2e\x0a\xd4\x7f\x83\xf5\xd6\x7b\x08\x53\x14\x84\xe4\x4d\x35\xcd\xd7\x9b\x57\x2a\x6a\x89\xa0\x09\xc7\x1c\x45\xf3\xdf\x8c\xfa\x52\x42\xfb\xd0\x3a\x58\x0f\x5a\x14\xea\x23\xba\xc0\xd5\x1b\xfb\x60\x37\xa0\x4d\x30\xd7\x07\x78\xbb\xfa\xf5\xdd\x8f\x18\x06\x57\xe1\x68\x10\x54\x53\x1d\xd6\xaa\xcd\x81\xd1\xa1\xbb\x0c\xed\xa1\xb9\xd8\xb3\x91\x26\x03\xd4\x49\x61\x94\x66\x1b\xae\x0c\xad\x09\xb3\x61\xaa\x6e\xae\xf1\x66\x5d\x6a\xf4\xc7\xb5\x6d\xcd\xe6\x5c\x62\xcf\x18\xaa\x1b\x25\xc1\x3f\x01\x00\x00\xff\xff\x9d\x9f\x08\xf0\xd3\x22\x00\x00")

func swaggerYamlBytes() ([]byte, error) {
	return bindataRead(
		_swaggerYaml,
		"swagger.yaml",
	)
}

func swaggerYaml() (*asset, error) {
	bytes, err := swaggerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger.yaml", size: 8915, mode: os.FileMode(438), modTime: time.Unix(1601571286, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger.yaml": swaggerYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"swagger.yaml": &bintree{swaggerYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
