// Code generated by go-swagger; DO NOT EDIT.

package scopes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/goolanger/swaggerize-auth/models"
)

// InfoHandlerFunc turns a function with the right signature into a info handler
type InfoHandlerFunc func(InfoParams, *models.Claims) middleware.Responder

// Handle executing the request and returning a response
func (fn InfoHandlerFunc) Handle(params InfoParams, principal *models.Claims) middleware.Responder {
	return fn(params, principal)
}

// InfoHandler interface for that can handle valid info params
type InfoHandler interface {
	Handle(InfoParams, *models.Claims) middleware.Responder
}

// NewInfo creates a new http.Handler for the info operation
func NewInfo(ctx *middleware.Context, handler InfoHandler) *Info {
	return &Info{Context: ctx, Handler: handler}
}

/*Info swagger:route GET /api/scope/info Scopes info

Info info API

*/
type Info struct {
	Context *middleware.Context
	Handler InfoHandler
}

func (o *Info) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewInfoParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Claims
	if uprinc != nil {
		principal = uprinc.(*models.Claims) // this is really a models.Claims, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// InfoOKBody info o k body
//
// swagger:model InfoOKBody
type InfoOKBody struct {

	// email
	Email string `json:"email,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// verified email
	VerifiedEmail bool `json:"verified_email,omitempty"`
}

// Validate validates this info o k body
func (o *InfoOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *InfoOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *InfoOKBody) UnmarshalBinary(b []byte) error {
	var res InfoOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
