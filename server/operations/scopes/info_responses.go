// Code generated by go-swagger; DO NOT EDIT.

package scopes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// InfoOKCode is the HTTP code returned for type InfoOK
const InfoOKCode int = 200

/*InfoOK ok

swagger:response infoOK
*/
type InfoOK struct {

	/*
	  In: Body
	*/
	Payload *InfoOKBody `json:"body,omitempty"`
}

// NewInfoOK creates InfoOK with default headers values
func NewInfoOK() *InfoOK {

	return &InfoOK{}
}

// WithPayload adds the payload to the info o k response
func (o *InfoOK) WithPayload(payload *InfoOKBody) *InfoOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the info o k response
func (o *InfoOK) SetPayload(payload *InfoOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *InfoOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// InfoInternalServerErrorCode is the HTTP code returned for type InfoInternalServerError
const InfoInternalServerErrorCode int = 500

/*InfoInternalServerError internal server error

swagger:response infoInternalServerError
*/
type InfoInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewInfoInternalServerError creates InfoInternalServerError with default headers values
func NewInfoInternalServerError() *InfoInternalServerError {

	return &InfoInternalServerError{}
}

// WithPayload adds the payload to the info internal server error response
func (o *InfoInternalServerError) WithPayload(payload string) *InfoInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the info internal server error response
func (o *InfoInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *InfoInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
