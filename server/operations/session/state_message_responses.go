// Code generated by go-swagger; DO NOT EDIT.

package session

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// StateMessageOKCode is the HTTP code returned for type StateMessageOK
const StateMessageOKCode int = 200

/*StateMessageOK OK

swagger:response stateMessageOK
*/
type StateMessageOK struct {
}

// NewStateMessageOK creates StateMessageOK with default headers values
func NewStateMessageOK() *StateMessageOK {

	return &StateMessageOK{}
}

// WriteResponse to the client
func (o *StateMessageOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// StateMessageInternalServerErrorCode is the HTTP code returned for type StateMessageInternalServerError
const StateMessageInternalServerErrorCode int = 500

/*StateMessageInternalServerError internal server error

swagger:response stateMessageInternalServerError
*/
type StateMessageInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewStateMessageInternalServerError creates StateMessageInternalServerError with default headers values
func NewStateMessageInternalServerError() *StateMessageInternalServerError {

	return &StateMessageInternalServerError{}
}

// WithPayload adds the payload to the state message internal server error response
func (o *StateMessageInternalServerError) WithPayload(payload string) *StateMessageInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the state message internal server error response
func (o *StateMessageInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StateMessageInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
