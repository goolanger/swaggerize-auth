// Code generated by go-swagger; DO NOT EDIT.

package session

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// StateMessageHandlerFunc turns a function with the right signature into a state message handler
type StateMessageHandlerFunc func(StateMessageParams) middleware.Responder

// Handle executing the request and returning a response
func (fn StateMessageHandlerFunc) Handle(params StateMessageParams) middleware.Responder {
	return fn(params)
}

// StateMessageHandler interface for that can handle valid state message params
type StateMessageHandler interface {
	Handle(StateMessageParams) middleware.Responder
}

// NewStateMessage creates a new http.Handler for the state message operation
func NewStateMessage(ctx *middleware.Context, handler StateMessageHandler) *StateMessage {
	return &StateMessage{Context: ctx, Handler: handler}
}

/*StateMessage swagger:route GET /auth/session/state/message Session stateMessage

StateMessage state message API

*/
type StateMessage struct {
	Context *middleware.Context
	Handler StateMessageHandler
}

func (o *StateMessage) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewStateMessageParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
