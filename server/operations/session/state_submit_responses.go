// Code generated by go-swagger; DO NOT EDIT.

package session

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// StateSubmitOKCode is the HTTP code returned for type StateSubmitOK
const StateSubmitOKCode int = 200

/*StateSubmitOK OK

swagger:response stateSubmitOK
*/
type StateSubmitOK struct {
}

// NewStateSubmitOK creates StateSubmitOK with default headers values
func NewStateSubmitOK() *StateSubmitOK {

	return &StateSubmitOK{}
}

// WriteResponse to the client
func (o *StateSubmitOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// StateSubmitInternalServerErrorCode is the HTTP code returned for type StateSubmitInternalServerError
const StateSubmitInternalServerErrorCode int = 500

/*StateSubmitInternalServerError internal server error

swagger:response stateSubmitInternalServerError
*/
type StateSubmitInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewStateSubmitInternalServerError creates StateSubmitInternalServerError with default headers values
func NewStateSubmitInternalServerError() *StateSubmitInternalServerError {

	return &StateSubmitInternalServerError{}
}

// WithPayload adds the payload to the state submit internal server error response
func (o *StateSubmitInternalServerError) WithPayload(payload string) *StateSubmitInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the state submit internal server error response
func (o *StateSubmitInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StateSubmitInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
