// Code generated by go-swagger; DO NOT EDIT.

package session

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// RegisterActivateOKCode is the HTTP code returned for type RegisterActivateOK
const RegisterActivateOKCode int = 200

/*RegisterActivateOK OK

swagger:response registerActivateOK
*/
type RegisterActivateOK struct {
}

// NewRegisterActivateOK creates RegisterActivateOK with default headers values
func NewRegisterActivateOK() *RegisterActivateOK {

	return &RegisterActivateOK{}
}

// WriteResponse to the client
func (o *RegisterActivateOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// RegisterActivateInternalServerErrorCode is the HTTP code returned for type RegisterActivateInternalServerError
const RegisterActivateInternalServerErrorCode int = 500

/*RegisterActivateInternalServerError internal server error

swagger:response registerActivateInternalServerError
*/
type RegisterActivateInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewRegisterActivateInternalServerError creates RegisterActivateInternalServerError with default headers values
func NewRegisterActivateInternalServerError() *RegisterActivateInternalServerError {

	return &RegisterActivateInternalServerError{}
}

// WithPayload adds the payload to the register activate internal server error response
func (o *RegisterActivateInternalServerError) WithPayload(payload string) *RegisterActivateInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register activate internal server error response
func (o *RegisterActivateInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterActivateInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
