// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/goolanger/swaggerize-auth/models"
	"github.com/goolanger/swaggerize-auth/server/operations/oauth"
	"github.com/goolanger/swaggerize-auth/server/operations/scopes"
	"github.com/goolanger/swaggerize-auth/server/operations/session"
)

// NewGithubComGoolangerSwaggerizeAuthAPI creates a new GithubComGoolangerSwaggerizeAuth instance
func NewGithubComGoolangerSwaggerizeAuthAPI(spec *loads.Document) *GithubComGoolangerSwaggerizeAuthAPI {
	return &GithubComGoolangerSwaggerizeAuthAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		UrlformConsumer: runtime.DiscardConsumer,

		HTMLProducer: runtime.ProducerFunc(func(w io.Writer, data interface{}) error {
			return errors.NotImplemented("html producer has not yet been implemented")
		}),
		JSONProducer: runtime.JSONProducer(),

		OauthAuthorizeHandler: oauth.AuthorizeHandlerFunc(func(params oauth.AuthorizeParams) middleware.Responder {
			return middleware.NotImplemented("operation oauth.Authorize has not yet been implemented")
		}),
		OauthAuthorizeSubmitHandler: oauth.AuthorizeSubmitHandlerFunc(func(params oauth.AuthorizeSubmitParams) middleware.Responder {
			return middleware.NotImplemented("operation oauth.AuthorizeSubmit has not yet been implemented")
		}),
		ScopesInfoHandler: scopes.InfoHandlerFunc(func(params scopes.InfoParams, principal *models.Claims) middleware.Responder {
			return middleware.NotImplemented("operation scopes.Info has not yet been implemented")
		}),
		OauthProviderHandler: oauth.ProviderHandlerFunc(func(params oauth.ProviderParams) middleware.Responder {
			return middleware.NotImplemented("operation oauth.Provider has not yet been implemented")
		}),
		SessionRecoveryHandler: session.RecoveryHandlerFunc(func(params session.RecoveryParams) middleware.Responder {
			return middleware.NotImplemented("operation session.Recovery has not yet been implemented")
		}),
		SessionRecoverySubmitHandler: session.RecoverySubmitHandlerFunc(func(params session.RecoverySubmitParams) middleware.Responder {
			return middleware.NotImplemented("operation session.RecoverySubmit has not yet been implemented")
		}),
		SessionRegisterHandler: session.RegisterHandlerFunc(func(params session.RegisterParams) middleware.Responder {
			return middleware.NotImplemented("operation session.Register has not yet been implemented")
		}),
		SessionRegisterActivateHandler: session.RegisterActivateHandlerFunc(func(params session.RegisterActivateParams) middleware.Responder {
			return middleware.NotImplemented("operation session.RegisterActivate has not yet been implemented")
		}),
		SessionRegisterSubmitHandler: session.RegisterSubmitHandlerFunc(func(params session.RegisterSubmitParams) middleware.Responder {
			return middleware.NotImplemented("operation session.RegisterSubmit has not yet been implemented")
		}),
		SessionStateHandler: session.StateHandlerFunc(func(params session.StateParams) middleware.Responder {
			return middleware.NotImplemented("operation session.State has not yet been implemented")
		}),
		SessionStateMessageHandler: session.StateMessageHandlerFunc(func(params session.StateMessageParams) middleware.Responder {
			return middleware.NotImplemented("operation session.StateMessage has not yet been implemented")
		}),
		SessionStateSubmitHandler: session.StateSubmitHandlerFunc(func(params session.StateSubmitParams) middleware.Responder {
			return middleware.NotImplemented("operation session.StateSubmit has not yet been implemented")
		}),
		OauthTokenHandler: oauth.TokenHandlerFunc(func(params oauth.TokenParams) middleware.Responder {
			return middleware.NotImplemented("operation oauth.Token has not yet been implemented")
		}),

		// Applies when the "Authorization" header is set
		BearerAuth: func(token string) (*models.Claims, error) {
			return nil, errors.NotImplemented("api key auth (bearer) Authorization from header param [Authorization] has not yet been implemented")
		},
		// Applies when the "access_token" query is set
		ScopedAuth: func(token string) (*models.Claims, error) {
			return nil, errors.NotImplemented("api key auth (scoped) access_token from query param [access_token] has not yet been implemented")
		},
		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*GithubComGoolangerSwaggerizeAuthAPI Oauth 2.0 api reference */
type GithubComGoolangerSwaggerizeAuthAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// UrlformConsumer registers a consumer for the following mime types:
	//   - application/x-www-form-urlencoded
	UrlformConsumer runtime.Consumer

	// HTMLProducer registers a producer for the following mime types:
	//   - text/html
	HTMLProducer runtime.Producer
	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// BearerAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key Authorization provided in the header
	BearerAuth func(string) (*models.Claims, error)

	// ScopedAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key access_token provided in the query
	ScopedAuth func(string) (*models.Claims, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// OauthAuthorizeHandler sets the operation handler for the authorize operation
	OauthAuthorizeHandler oauth.AuthorizeHandler
	// OauthAuthorizeSubmitHandler sets the operation handler for the authorize submit operation
	OauthAuthorizeSubmitHandler oauth.AuthorizeSubmitHandler
	// ScopesInfoHandler sets the operation handler for the info operation
	ScopesInfoHandler scopes.InfoHandler
	// OauthProviderHandler sets the operation handler for the provider operation
	OauthProviderHandler oauth.ProviderHandler
	// SessionRecoveryHandler sets the operation handler for the recovery operation
	SessionRecoveryHandler session.RecoveryHandler
	// SessionRecoverySubmitHandler sets the operation handler for the recovery submit operation
	SessionRecoverySubmitHandler session.RecoverySubmitHandler
	// SessionRegisterHandler sets the operation handler for the register operation
	SessionRegisterHandler session.RegisterHandler
	// SessionRegisterActivateHandler sets the operation handler for the register activate operation
	SessionRegisterActivateHandler session.RegisterActivateHandler
	// SessionRegisterSubmitHandler sets the operation handler for the register submit operation
	SessionRegisterSubmitHandler session.RegisterSubmitHandler
	// SessionStateHandler sets the operation handler for the state operation
	SessionStateHandler session.StateHandler
	// SessionStateMessageHandler sets the operation handler for the state message operation
	SessionStateMessageHandler session.StateMessageHandler
	// SessionStateSubmitHandler sets the operation handler for the state submit operation
	SessionStateSubmitHandler session.StateSubmitHandler
	// OauthTokenHandler sets the operation handler for the token operation
	OauthTokenHandler oauth.TokenHandler
	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *GithubComGoolangerSwaggerizeAuthAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *GithubComGoolangerSwaggerizeAuthAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *GithubComGoolangerSwaggerizeAuthAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *GithubComGoolangerSwaggerizeAuthAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *GithubComGoolangerSwaggerizeAuthAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *GithubComGoolangerSwaggerizeAuthAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *GithubComGoolangerSwaggerizeAuthAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the GithubComGoolangerSwaggerizeAuthAPI
func (o *GithubComGoolangerSwaggerizeAuthAPI) Validate() error {
	var unregistered []string

	if o.UrlformConsumer == nil {
		unregistered = append(unregistered, "UrlformConsumer")
	}

	if o.HTMLProducer == nil {
		unregistered = append(unregistered, "HTMLProducer")
	}
	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.BearerAuth == nil {
		unregistered = append(unregistered, "AuthorizationAuth")
	}
	if o.ScopedAuth == nil {
		unregistered = append(unregistered, "AccessTokenAuth")
	}

	if o.OauthAuthorizeHandler == nil {
		unregistered = append(unregistered, "oauth.AuthorizeHandler")
	}
	if o.OauthAuthorizeSubmitHandler == nil {
		unregistered = append(unregistered, "oauth.AuthorizeSubmitHandler")
	}
	if o.ScopesInfoHandler == nil {
		unregistered = append(unregistered, "scopes.InfoHandler")
	}
	if o.OauthProviderHandler == nil {
		unregistered = append(unregistered, "oauth.ProviderHandler")
	}
	if o.SessionRecoveryHandler == nil {
		unregistered = append(unregistered, "session.RecoveryHandler")
	}
	if o.SessionRecoverySubmitHandler == nil {
		unregistered = append(unregistered, "session.RecoverySubmitHandler")
	}
	if o.SessionRegisterHandler == nil {
		unregistered = append(unregistered, "session.RegisterHandler")
	}
	if o.SessionRegisterActivateHandler == nil {
		unregistered = append(unregistered, "session.RegisterActivateHandler")
	}
	if o.SessionRegisterSubmitHandler == nil {
		unregistered = append(unregistered, "session.RegisterSubmitHandler")
	}
	if o.SessionStateHandler == nil {
		unregistered = append(unregistered, "session.StateHandler")
	}
	if o.SessionStateMessageHandler == nil {
		unregistered = append(unregistered, "session.StateMessageHandler")
	}
	if o.SessionStateSubmitHandler == nil {
		unregistered = append(unregistered, "session.StateSubmitHandler")
	}
	if o.OauthTokenHandler == nil {
		unregistered = append(unregistered, "oauth.TokenHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *GithubComGoolangerSwaggerizeAuthAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *GithubComGoolangerSwaggerizeAuthAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	result := make(map[string]runtime.Authenticator)
	for name := range schemes {
		switch name {
		case "bearer":
			scheme := schemes[name]
			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, func(token string) (interface{}, error) {
				return o.BearerAuth(token)
			})

		case "scoped":
			scheme := schemes[name]
			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, func(token string) (interface{}, error) {
				return o.ScopedAuth(token)
			})

		}
	}
	return result
}

// Authorizer returns the registered authorizer
func (o *GithubComGoolangerSwaggerizeAuthAPI) Authorizer() runtime.Authorizer {
	return o.APIAuthorizer
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *GithubComGoolangerSwaggerizeAuthAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/x-www-form-urlencoded":
			result["application/x-www-form-urlencoded"] = o.UrlformConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *GithubComGoolangerSwaggerizeAuthAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "text/html":
			result["text/html"] = o.HTMLProducer
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *GithubComGoolangerSwaggerizeAuthAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the github com goolanger swaggerize auth API
func (o *GithubComGoolangerSwaggerizeAuthAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *GithubComGoolangerSwaggerizeAuthAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/auth/oauth/authorize"] = oauth.NewAuthorize(o.context, o.OauthAuthorizeHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/auth/oauth/authorize"] = oauth.NewAuthorizeSubmit(o.context, o.OauthAuthorizeSubmitHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/auth/scope/info"] = scopes.NewInfo(o.context, o.ScopesInfoHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/auth/oauth/providers/{provider}"] = oauth.NewProvider(o.context, o.OauthProviderHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/auth/session/recovery"] = session.NewRecovery(o.context, o.SessionRecoveryHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/auth/session/recovery"] = session.NewRecoverySubmit(o.context, o.SessionRecoverySubmitHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/auth/session/register"] = session.NewRegister(o.context, o.SessionRegisterHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/auth/session/register/activate"] = session.NewRegisterActivate(o.context, o.SessionRegisterActivateHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/auth/session/register"] = session.NewRegisterSubmit(o.context, o.SessionRegisterSubmitHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/auth/session/state"] = session.NewState(o.context, o.SessionStateHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/auth/session/state/message"] = session.NewStateMessage(o.context, o.SessionStateMessageHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/auth/session/state"] = session.NewStateSubmit(o.context, o.SessionStateSubmitHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/auth/oauth/token"] = oauth.NewToken(o.context, o.OauthTokenHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *GithubComGoolangerSwaggerizeAuthAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *GithubComGoolangerSwaggerizeAuthAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *GithubComGoolangerSwaggerizeAuthAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *GithubComGoolangerSwaggerizeAuthAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *GithubComGoolangerSwaggerizeAuthAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
