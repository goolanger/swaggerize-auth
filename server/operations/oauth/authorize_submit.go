// Code generated by go-swagger; DO NOT EDIT.

package oauth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// AuthorizeSubmitHandlerFunc turns a function with the right signature into a authorize submit handler
type AuthorizeSubmitHandlerFunc func(AuthorizeSubmitParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AuthorizeSubmitHandlerFunc) Handle(params AuthorizeSubmitParams) middleware.Responder {
	return fn(params)
}

// AuthorizeSubmitHandler interface for that can handle valid authorize submit params
type AuthorizeSubmitHandler interface {
	Handle(AuthorizeSubmitParams) middleware.Responder
}

// NewAuthorizeSubmit creates a new http.Handler for the authorize submit operation
func NewAuthorizeSubmit(ctx *middleware.Context, handler AuthorizeSubmitHandler) *AuthorizeSubmit {
	return &AuthorizeSubmit{Context: ctx, Handler: handler}
}

/*AuthorizeSubmit swagger:route POST /api/oauth/authorize Oauth authorizeSubmit

AuthorizeSubmit authorize submit API

*/
type AuthorizeSubmit struct {
	Context *middleware.Context
	Handler AuthorizeSubmitHandler
}

func (o *AuthorizeSubmit) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAuthorizeSubmitParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
