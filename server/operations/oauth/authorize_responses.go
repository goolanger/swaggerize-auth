// Code generated by go-swagger; DO NOT EDIT.

package oauth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// AuthorizeOKCode is the HTTP code returned for type AuthorizeOK
const AuthorizeOKCode int = 200

/*AuthorizeOK Ok

swagger:response authorizeOK
*/
type AuthorizeOK struct {
}

// NewAuthorizeOK creates AuthorizeOK with default headers values
func NewAuthorizeOK() *AuthorizeOK {

	return &AuthorizeOK{}
}

// WriteResponse to the client
func (o *AuthorizeOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// AuthorizeInternalServerErrorCode is the HTTP code returned for type AuthorizeInternalServerError
const AuthorizeInternalServerErrorCode int = 500

/*AuthorizeInternalServerError internal server error

swagger:response authorizeInternalServerError
*/
type AuthorizeInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewAuthorizeInternalServerError creates AuthorizeInternalServerError with default headers values
func NewAuthorizeInternalServerError() *AuthorizeInternalServerError {

	return &AuthorizeInternalServerError{}
}

// WithPayload adds the payload to the authorize internal server error response
func (o *AuthorizeInternalServerError) WithPayload(payload string) *AuthorizeInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the authorize internal server error response
func (o *AuthorizeInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AuthorizeInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
