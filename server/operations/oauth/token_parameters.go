// Code generated by go-swagger; DO NOT EDIT.

package oauth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewTokenParams creates a new TokenParams object
// no default values defined in spec.
func NewTokenParams() TokenParams {

	return TokenParams{}
}

// TokenParams contains all the bound params for the token operation
// typically these are obtained from a http.Request
//
// swagger:parameters Token
type TokenParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: formData
	*/
	ClientID *string
	/*
	  In: formData
	*/
	ClientSecret *string
	/*
	  In: formData
	*/
	Code *string
	/*
	  In: formData
	*/
	GrantType *string
	/*
	  In: formData
	*/
	Password *strfmt.Password
	/*
	  In: formData
	*/
	RedirectURI *string
	/*
	  In: formData
	*/
	RefreshToken *string
	/*
	  In: formData
	*/
	Scope *string
	/*
	  In: formData
	*/
	Username *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewTokenParams() beforehand.
func (o *TokenParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(32 << 20); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}
	fds := runtime.Values(r.Form)

	fdClientID, fdhkClientID, _ := fds.GetOK("client_id")
	if err := o.bindClientID(fdClientID, fdhkClientID, route.Formats); err != nil {
		res = append(res, err)
	}

	fdClientSecret, fdhkClientSecret, _ := fds.GetOK("client_secret")
	if err := o.bindClientSecret(fdClientSecret, fdhkClientSecret, route.Formats); err != nil {
		res = append(res, err)
	}

	fdCode, fdhkCode, _ := fds.GetOK("code")
	if err := o.bindCode(fdCode, fdhkCode, route.Formats); err != nil {
		res = append(res, err)
	}

	fdGrantType, fdhkGrantType, _ := fds.GetOK("grant_type")
	if err := o.bindGrantType(fdGrantType, fdhkGrantType, route.Formats); err != nil {
		res = append(res, err)
	}

	fdPassword, fdhkPassword, _ := fds.GetOK("password")
	if err := o.bindPassword(fdPassword, fdhkPassword, route.Formats); err != nil {
		res = append(res, err)
	}

	fdRedirectURI, fdhkRedirectURI, _ := fds.GetOK("redirect_uri")
	if err := o.bindRedirectURI(fdRedirectURI, fdhkRedirectURI, route.Formats); err != nil {
		res = append(res, err)
	}

	fdRefreshToken, fdhkRefreshToken, _ := fds.GetOK("refresh_token")
	if err := o.bindRefreshToken(fdRefreshToken, fdhkRefreshToken, route.Formats); err != nil {
		res = append(res, err)
	}

	fdScope, fdhkScope, _ := fds.GetOK("scope")
	if err := o.bindScope(fdScope, fdhkScope, route.Formats); err != nil {
		res = append(res, err)
	}

	fdUsername, fdhkUsername, _ := fds.GetOK("username")
	if err := o.bindUsername(fdUsername, fdhkUsername, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindClientID binds and validates parameter ClientID from formData.
func (o *TokenParams) bindClientID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.ClientID = &raw

	return nil
}

// bindClientSecret binds and validates parameter ClientSecret from formData.
func (o *TokenParams) bindClientSecret(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.ClientSecret = &raw

	return nil
}

// bindCode binds and validates parameter Code from formData.
func (o *TokenParams) bindCode(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Code = &raw

	return nil
}

// bindGrantType binds and validates parameter GrantType from formData.
func (o *TokenParams) bindGrantType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.GrantType = &raw

	if err := o.validateGrantType(formats); err != nil {
		return err
	}

	return nil
}

// validateGrantType carries on validations for parameter GrantType
func (o *TokenParams) validateGrantType(formats strfmt.Registry) error {

	if err := validate.EnumCase("grant_type", "formData", *o.GrantType, []interface{}{"password", "authorization_code", "client_credentials", "refresh_token"}, true); err != nil {
		return err
	}

	return nil
}

// bindPassword binds and validates parameter Password from formData.
func (o *TokenParams) bindPassword(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: password
	value, err := formats.Parse("password", raw)
	if err != nil {
		return errors.InvalidType("password", "formData", "strfmt.Password", raw)
	}
	o.Password = (value.(*strfmt.Password))

	if err := o.validatePassword(formats); err != nil {
		return err
	}

	return nil
}

// validatePassword carries on validations for parameter Password
func (o *TokenParams) validatePassword(formats strfmt.Registry) error {

	if err := validate.FormatOf("password", "formData", "password", o.Password.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindRedirectURI binds and validates parameter RedirectURI from formData.
func (o *TokenParams) bindRedirectURI(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.RedirectURI = &raw

	return nil
}

// bindRefreshToken binds and validates parameter RefreshToken from formData.
func (o *TokenParams) bindRefreshToken(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.RefreshToken = &raw

	return nil
}

// bindScope binds and validates parameter Scope from formData.
func (o *TokenParams) bindScope(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Scope = &raw

	return nil
}

// bindUsername binds and validates parameter Username from formData.
func (o *TokenParams) bindUsername(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Username = &raw

	return nil
}
