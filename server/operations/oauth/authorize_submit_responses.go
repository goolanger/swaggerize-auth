// Code generated by go-swagger; DO NOT EDIT.

package oauth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// AuthorizeSubmitOKCode is the HTTP code returned for type AuthorizeSubmitOK
const AuthorizeSubmitOKCode int = 200

/*AuthorizeSubmitOK operation success

swagger:response authorizeSubmitOK
*/
type AuthorizeSubmitOK struct {
}

// NewAuthorizeSubmitOK creates AuthorizeSubmitOK with default headers values
func NewAuthorizeSubmitOK() *AuthorizeSubmitOK {

	return &AuthorizeSubmitOK{}
}

// WriteResponse to the client
func (o *AuthorizeSubmitOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// AuthorizeSubmitInternalServerErrorCode is the HTTP code returned for type AuthorizeSubmitInternalServerError
const AuthorizeSubmitInternalServerErrorCode int = 500

/*AuthorizeSubmitInternalServerError internal server error

swagger:response authorizeSubmitInternalServerError
*/
type AuthorizeSubmitInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewAuthorizeSubmitInternalServerError creates AuthorizeSubmitInternalServerError with default headers values
func NewAuthorizeSubmitInternalServerError() *AuthorizeSubmitInternalServerError {

	return &AuthorizeSubmitInternalServerError{}
}

// WithPayload adds the payload to the authorize submit internal server error response
func (o *AuthorizeSubmitInternalServerError) WithPayload(payload string) *AuthorizeSubmitInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the authorize submit internal server error response
func (o *AuthorizeSubmitInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AuthorizeSubmitInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
