// Code generated by go-swagger; DO NOT EDIT.

package session

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewRegisterActivateParams creates a new RegisterActivateParams object
// with the default values initialized.
func NewRegisterActivateParams() *RegisterActivateParams {
	var ()
	return &RegisterActivateParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRegisterActivateParamsWithTimeout creates a new RegisterActivateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRegisterActivateParamsWithTimeout(timeout time.Duration) *RegisterActivateParams {
	var ()
	return &RegisterActivateParams{

		timeout: timeout,
	}
}

// NewRegisterActivateParamsWithContext creates a new RegisterActivateParams object
// with the default values initialized, and the ability to set a context for a request
func NewRegisterActivateParamsWithContext(ctx context.Context) *RegisterActivateParams {
	var ()
	return &RegisterActivateParams{

		Context: ctx,
	}
}

// NewRegisterActivateParamsWithHTTPClient creates a new RegisterActivateParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRegisterActivateParamsWithHTTPClient(client *http.Client) *RegisterActivateParams {
	var ()
	return &RegisterActivateParams{
		HTTPClient: client,
	}
}

/*RegisterActivateParams contains all the parameters to send to the API endpoint
for the register activate operation typically these are written to a http.Request
*/
type RegisterActivateParams struct {

	/*Token*/
	Token string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the register activate params
func (o *RegisterActivateParams) WithTimeout(timeout time.Duration) *RegisterActivateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the register activate params
func (o *RegisterActivateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the register activate params
func (o *RegisterActivateParams) WithContext(ctx context.Context) *RegisterActivateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the register activate params
func (o *RegisterActivateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the register activate params
func (o *RegisterActivateParams) WithHTTPClient(client *http.Client) *RegisterActivateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the register activate params
func (o *RegisterActivateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithToken adds the token to the register activate params
func (o *RegisterActivateParams) WithToken(token string) *RegisterActivateParams {
	o.SetToken(token)
	return o
}

// SetToken adds the token to the register activate params
func (o *RegisterActivateParams) SetToken(token string) {
	o.Token = token
}

// WriteToRequest writes these params to a swagger request
func (o *RegisterActivateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param token
	qrToken := o.Token
	qToken := qrToken
	if qToken != "" {
		if err := r.SetQueryParam("token", qToken); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
