// Code generated by go-swagger; DO NOT EDIT.

package session

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewStateParams creates a new StateParams object
// with the default values initialized.
func NewStateParams() *StateParams {
	var ()
	return &StateParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewStateParamsWithTimeout creates a new StateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewStateParamsWithTimeout(timeout time.Duration) *StateParams {
	var ()
	return &StateParams{

		timeout: timeout,
	}
}

// NewStateParamsWithContext creates a new StateParams object
// with the default values initialized, and the ability to set a context for a request
func NewStateParamsWithContext(ctx context.Context) *StateParams {
	var ()
	return &StateParams{

		Context: ctx,
	}
}

// NewStateParamsWithHTTPClient creates a new StateParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewStateParamsWithHTTPClient(client *http.Client) *StateParams {
	var ()
	return &StateParams{
		HTTPClient: client,
	}
}

/*StateParams contains all the parameters to send to the API endpoint
for the state operation typically these are written to a http.Request
*/
type StateParams struct {

	/*Action*/
	Action string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the state params
func (o *StateParams) WithTimeout(timeout time.Duration) *StateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the state params
func (o *StateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the state params
func (o *StateParams) WithContext(ctx context.Context) *StateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the state params
func (o *StateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the state params
func (o *StateParams) WithHTTPClient(client *http.Client) *StateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the state params
func (o *StateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAction adds the action to the state params
func (o *StateParams) WithAction(action string) *StateParams {
	o.SetAction(action)
	return o
}

// SetAction adds the action to the state params
func (o *StateParams) SetAction(action string) {
	o.Action = action
}

// WriteToRequest writes these params to a swagger request
func (o *StateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param action
	qrAction := o.Action
	qAction := qrAction
	if qAction != "" {
		if err := r.SetQueryParam("action", qAction); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
