// Code generated by go-swagger; DO NOT EDIT.

package session

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new session API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for session API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	Recovery(params *RecoveryParams) (*RecoveryOK, error)

	RecoverySubmit(params *RecoverySubmitParams) (*RecoverySubmitOK, error)

	Register(params *RegisterParams) (*RegisterOK, error)

	RegisterActivate(params *RegisterActivateParams) (*RegisterActivateOK, error)

	RegisterSubmit(params *RegisterSubmitParams) (*RegisterSubmitOK, error)

	State(params *StateParams) (*StateOK, error)

	StateMessage(params *StateMessageParams) (*StateMessageOK, error)

	StateSubmit(params *StateSubmitParams) (*StateSubmitOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  Recovery recovery API
*/
func (a *Client) Recovery(params *RecoveryParams) (*RecoveryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRecoveryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Recovery",
		Method:             "GET",
		PathPattern:        "/api/session/recovery",
		ProducesMediaTypes: []string{"text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RecoveryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RecoveryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Recovery: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RecoverySubmit recovery submit API
*/
func (a *Client) RecoverySubmit(params *RecoverySubmitParams) (*RecoverySubmitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRecoverySubmitParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RecoverySubmit",
		Method:             "POST",
		PathPattern:        "/api/session/recovery",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RecoverySubmitReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RecoverySubmitOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RecoverySubmit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Register register API
*/
func (a *Client) Register(params *RegisterParams) (*RegisterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Register",
		Method:             "GET",
		PathPattern:        "/api/session/register",
		ProducesMediaTypes: []string{"text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RegisterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RegisterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Register: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RegisterActivate register activate API
*/
func (a *Client) RegisterActivate(params *RegisterActivateParams) (*RegisterActivateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterActivateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RegisterActivate",
		Method:             "GET",
		PathPattern:        "/api/session/register/activate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RegisterActivateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RegisterActivateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RegisterActivate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RegisterSubmit register submit API
*/
func (a *Client) RegisterSubmit(params *RegisterSubmitParams) (*RegisterSubmitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterSubmitParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RegisterSubmit",
		Method:             "POST",
		PathPattern:        "/api/session/register",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RegisterSubmitReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RegisterSubmitOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RegisterSubmit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  State state API
*/
func (a *Client) State(params *StateParams) (*StateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "State",
		Method:             "GET",
		PathPattern:        "/api/session/state",
		ProducesMediaTypes: []string{"text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for State: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StateMessage state message API
*/
func (a *Client) StateMessage(params *StateMessageParams) (*StateMessageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStateMessageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StateMessage",
		Method:             "GET",
		PathPattern:        "/api/session/state/message",
		ProducesMediaTypes: []string{"text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StateMessageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StateMessageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StateMessage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StateSubmit state submit API
*/
func (a *Client) StateSubmit(params *StateSubmitParams) (*StateSubmitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStateSubmitParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StateSubmit",
		Method:             "POST",
		PathPattern:        "/api/session/state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StateSubmitReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StateSubmitOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StateSubmit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
