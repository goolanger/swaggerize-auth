// Code generated by go-swagger; DO NOT EDIT.

package session

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewRecoveryParams creates a new RecoveryParams object
// with the default values initialized.
func NewRecoveryParams() *RecoveryParams {
	var ()
	return &RecoveryParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRecoveryParamsWithTimeout creates a new RecoveryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRecoveryParamsWithTimeout(timeout time.Duration) *RecoveryParams {
	var ()
	return &RecoveryParams{

		timeout: timeout,
	}
}

// NewRecoveryParamsWithContext creates a new RecoveryParams object
// with the default values initialized, and the ability to set a context for a request
func NewRecoveryParamsWithContext(ctx context.Context) *RecoveryParams {
	var ()
	return &RecoveryParams{

		Context: ctx,
	}
}

// NewRecoveryParamsWithHTTPClient creates a new RecoveryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRecoveryParamsWithHTTPClient(client *http.Client) *RecoveryParams {
	var ()
	return &RecoveryParams{
		HTTPClient: client,
	}
}

/*RecoveryParams contains all the parameters to send to the API endpoint
for the recovery operation typically these are written to a http.Request
*/
type RecoveryParams struct {

	/*Token*/
	Token string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the recovery params
func (o *RecoveryParams) WithTimeout(timeout time.Duration) *RecoveryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the recovery params
func (o *RecoveryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the recovery params
func (o *RecoveryParams) WithContext(ctx context.Context) *RecoveryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the recovery params
func (o *RecoveryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the recovery params
func (o *RecoveryParams) WithHTTPClient(client *http.Client) *RecoveryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the recovery params
func (o *RecoveryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithToken adds the token to the recovery params
func (o *RecoveryParams) WithToken(token string) *RecoveryParams {
	o.SetToken(token)
	return o
}

// SetToken adds the token to the recovery params
func (o *RecoveryParams) SetToken(token string) {
	o.Token = token
}

// WriteToRequest writes these params to a swagger request
func (o *RecoveryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param token
	qrToken := o.Token
	qToken := qrToken
	if qToken != "" {
		if err := r.SetQueryParam("token", qToken); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
