// Code generated by go-swagger; DO NOT EDIT.

package session

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// RegisterSubmitReader is a Reader for the RegisterSubmit structure.
type RegisterSubmitReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RegisterSubmitReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRegisterSubmitOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 409:
		result := NewRegisterSubmitConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRegisterSubmitInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewRegisterSubmitOK creates a RegisterSubmitOK with default headers values
func NewRegisterSubmitOK() *RegisterSubmitOK {
	return &RegisterSubmitOK{}
}

/*RegisterSubmitOK handles this case with default header values.

OK
*/
type RegisterSubmitOK struct {
}

func (o *RegisterSubmitOK) Error() string {
	return fmt.Sprintf("[POST /auth/session/register][%d] registerSubmitOK ", 200)
}

func (o *RegisterSubmitOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRegisterSubmitConflict creates a RegisterSubmitConflict with default headers values
func NewRegisterSubmitConflict() *RegisterSubmitConflict {
	return &RegisterSubmitConflict{}
}

/*RegisterSubmitConflict handles this case with default header values.

conflict
*/
type RegisterSubmitConflict struct {
}

func (o *RegisterSubmitConflict) Error() string {
	return fmt.Sprintf("[POST /auth/session/register][%d] registerSubmitConflict ", 409)
}

func (o *RegisterSubmitConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRegisterSubmitInternalServerError creates a RegisterSubmitInternalServerError with default headers values
func NewRegisterSubmitInternalServerError() *RegisterSubmitInternalServerError {
	return &RegisterSubmitInternalServerError{}
}

/*RegisterSubmitInternalServerError handles this case with default header values.

internal server error
*/
type RegisterSubmitInternalServerError struct {
	Payload string
}

func (o *RegisterSubmitInternalServerError) Error() string {
	return fmt.Sprintf("[POST /auth/session/register][%d] registerSubmitInternalServerError  %+v", 500, o.Payload)
}

func (o *RegisterSubmitInternalServerError) GetPayload() string {
	return o.Payload
}

func (o *RegisterSubmitInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
