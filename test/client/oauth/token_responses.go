// Code generated by go-swagger; DO NOT EDIT.

package oauth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TokenReader is a Reader for the Token structure.
type TokenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TokenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTokenOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewTokenInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewTokenOK creates a TokenOK with default headers values
func NewTokenOK() *TokenOK {
	return &TokenOK{}
}

/*TokenOK handles this case with default header values.

operation success
*/
type TokenOK struct {
	Payload *TokenOKBody
}

func (o *TokenOK) Error() string {
	return fmt.Sprintf("[POST /api/oauth/token][%d] tokenOK  %+v", 200, o.Payload)
}

func (o *TokenOK) GetPayload() *TokenOKBody {
	return o.Payload
}

func (o *TokenOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(TokenOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTokenInternalServerError creates a TokenInternalServerError with default headers values
func NewTokenInternalServerError() *TokenInternalServerError {
	return &TokenInternalServerError{}
}

/*TokenInternalServerError handles this case with default header values.

internal server error
*/
type TokenInternalServerError struct {
	Payload string
}

func (o *TokenInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/oauth/token][%d] tokenInternalServerError  %+v", 500, o.Payload)
}

func (o *TokenInternalServerError) GetPayload() string {
	return o.Payload
}

func (o *TokenInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*TokenOKBody token o k body
swagger:model TokenOKBody
*/
type TokenOKBody struct {

	// access token
	AccessToken string `json:"access_token,omitempty"`

	// expires in
	ExpiresIn int32 `json:"expires_in,omitempty"`

	// refresh token
	RefreshToken string `json:"refresh_token,omitempty"`

	// scope
	Scope string `json:"scope,omitempty"`

	// token type
	TokenType string `json:"token_type,omitempty"`
}

// Validate validates this token o k body
func (o *TokenOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *TokenOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TokenOKBody) UnmarshalBinary(b []byte) error {
	var res TokenOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
