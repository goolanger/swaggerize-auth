// Code generated by go-swagger; DO NOT EDIT.

package oauth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewAuthorizeSubmitParams creates a new AuthorizeSubmitParams object
// with the default values initialized.
func NewAuthorizeSubmitParams() *AuthorizeSubmitParams {
	var ()
	return &AuthorizeSubmitParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAuthorizeSubmitParamsWithTimeout creates a new AuthorizeSubmitParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAuthorizeSubmitParamsWithTimeout(timeout time.Duration) *AuthorizeSubmitParams {
	var ()
	return &AuthorizeSubmitParams{

		timeout: timeout,
	}
}

// NewAuthorizeSubmitParamsWithContext creates a new AuthorizeSubmitParams object
// with the default values initialized, and the ability to set a context for a request
func NewAuthorizeSubmitParamsWithContext(ctx context.Context) *AuthorizeSubmitParams {
	var ()
	return &AuthorizeSubmitParams{

		Context: ctx,
	}
}

// NewAuthorizeSubmitParamsWithHTTPClient creates a new AuthorizeSubmitParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAuthorizeSubmitParamsWithHTTPClient(client *http.Client) *AuthorizeSubmitParams {
	var ()
	return &AuthorizeSubmitParams{
		HTTPClient: client,
	}
}

/*AuthorizeSubmitParams contains all the parameters to send to the API endpoint
for the authorize submit operation typically these are written to a http.Request
*/
type AuthorizeSubmitParams struct {

	/*ClientID*/
	ClientID string
	/*Password*/
	Password string
	/*RedirectURI*/
	RedirectURI string
	/*ResponseType*/
	ResponseType string
	/*Scope*/
	Scope string
	/*State*/
	State string
	/*Username*/
	Username string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the authorize submit params
func (o *AuthorizeSubmitParams) WithTimeout(timeout time.Duration) *AuthorizeSubmitParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the authorize submit params
func (o *AuthorizeSubmitParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the authorize submit params
func (o *AuthorizeSubmitParams) WithContext(ctx context.Context) *AuthorizeSubmitParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the authorize submit params
func (o *AuthorizeSubmitParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the authorize submit params
func (o *AuthorizeSubmitParams) WithHTTPClient(client *http.Client) *AuthorizeSubmitParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the authorize submit params
func (o *AuthorizeSubmitParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClientID adds the clientID to the authorize submit params
func (o *AuthorizeSubmitParams) WithClientID(clientID string) *AuthorizeSubmitParams {
	o.SetClientID(clientID)
	return o
}

// SetClientID adds the clientId to the authorize submit params
func (o *AuthorizeSubmitParams) SetClientID(clientID string) {
	o.ClientID = clientID
}

// WithPassword adds the password to the authorize submit params
func (o *AuthorizeSubmitParams) WithPassword(password string) *AuthorizeSubmitParams {
	o.SetPassword(password)
	return o
}

// SetPassword adds the password to the authorize submit params
func (o *AuthorizeSubmitParams) SetPassword(password string) {
	o.Password = password
}

// WithRedirectURI adds the redirectURI to the authorize submit params
func (o *AuthorizeSubmitParams) WithRedirectURI(redirectURI string) *AuthorizeSubmitParams {
	o.SetRedirectURI(redirectURI)
	return o
}

// SetRedirectURI adds the redirectUri to the authorize submit params
func (o *AuthorizeSubmitParams) SetRedirectURI(redirectURI string) {
	o.RedirectURI = redirectURI
}

// WithResponseType adds the responseType to the authorize submit params
func (o *AuthorizeSubmitParams) WithResponseType(responseType string) *AuthorizeSubmitParams {
	o.SetResponseType(responseType)
	return o
}

// SetResponseType adds the responseType to the authorize submit params
func (o *AuthorizeSubmitParams) SetResponseType(responseType string) {
	o.ResponseType = responseType
}

// WithScope adds the scope to the authorize submit params
func (o *AuthorizeSubmitParams) WithScope(scope string) *AuthorizeSubmitParams {
	o.SetScope(scope)
	return o
}

// SetScope adds the scope to the authorize submit params
func (o *AuthorizeSubmitParams) SetScope(scope string) {
	o.Scope = scope
}

// WithState adds the state to the authorize submit params
func (o *AuthorizeSubmitParams) WithState(state string) *AuthorizeSubmitParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the authorize submit params
func (o *AuthorizeSubmitParams) SetState(state string) {
	o.State = state
}

// WithUsername adds the username to the authorize submit params
func (o *AuthorizeSubmitParams) WithUsername(username string) *AuthorizeSubmitParams {
	o.SetUsername(username)
	return o
}

// SetUsername adds the username to the authorize submit params
func (o *AuthorizeSubmitParams) SetUsername(username string) {
	o.Username = username
}

// WriteToRequest writes these params to a swagger request
func (o *AuthorizeSubmitParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form param client_id
	frClientID := o.ClientID
	fClientID := frClientID
	if fClientID != "" {
		if err := r.SetFormParam("client_id", fClientID); err != nil {
			return err
		}
	}

	// form param password
	frPassword := o.Password
	fPassword := frPassword
	if fPassword != "" {
		if err := r.SetFormParam("password", fPassword); err != nil {
			return err
		}
	}

	// form param redirect_uri
	frRedirectURI := o.RedirectURI
	fRedirectURI := frRedirectURI
	if fRedirectURI != "" {
		if err := r.SetFormParam("redirect_uri", fRedirectURI); err != nil {
			return err
		}
	}

	// form param response_type
	frResponseType := o.ResponseType
	fResponseType := frResponseType
	if fResponseType != "" {
		if err := r.SetFormParam("response_type", fResponseType); err != nil {
			return err
		}
	}

	// form param scope
	frScope := o.Scope
	fScope := frScope
	if fScope != "" {
		if err := r.SetFormParam("scope", fScope); err != nil {
			return err
		}
	}

	// form param state
	frState := o.State
	fState := frState
	if fState != "" {
		if err := r.SetFormParam("state", fState); err != nil {
			return err
		}
	}

	// form param username
	frUsername := o.Username
	fUsername := frUsername
	if fUsername != "" {
		if err := r.SetFormParam("username", fUsername); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
