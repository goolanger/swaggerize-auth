// Code generated by go-swagger; DO NOT EDIT.

package oauth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewAuthorizeParams creates a new AuthorizeParams object
// with the default values initialized.
func NewAuthorizeParams() *AuthorizeParams {
	var ()
	return &AuthorizeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAuthorizeParamsWithTimeout creates a new AuthorizeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAuthorizeParamsWithTimeout(timeout time.Duration) *AuthorizeParams {
	var ()
	return &AuthorizeParams{

		timeout: timeout,
	}
}

// NewAuthorizeParamsWithContext creates a new AuthorizeParams object
// with the default values initialized, and the ability to set a context for a request
func NewAuthorizeParamsWithContext(ctx context.Context) *AuthorizeParams {
	var ()
	return &AuthorizeParams{

		Context: ctx,
	}
}

// NewAuthorizeParamsWithHTTPClient creates a new AuthorizeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAuthorizeParamsWithHTTPClient(client *http.Client) *AuthorizeParams {
	var ()
	return &AuthorizeParams{
		HTTPClient: client,
	}
}

/*AuthorizeParams contains all the parameters to send to the API endpoint
for the authorize operation typically these are written to a http.Request
*/
type AuthorizeParams struct {

	/*ClientID*/
	ClientID string
	/*RedirectURI*/
	RedirectURI string
	/*Scope*/
	Scope string
	/*State*/
	State string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the authorize params
func (o *AuthorizeParams) WithTimeout(timeout time.Duration) *AuthorizeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the authorize params
func (o *AuthorizeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the authorize params
func (o *AuthorizeParams) WithContext(ctx context.Context) *AuthorizeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the authorize params
func (o *AuthorizeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the authorize params
func (o *AuthorizeParams) WithHTTPClient(client *http.Client) *AuthorizeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the authorize params
func (o *AuthorizeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClientID adds the clientID to the authorize params
func (o *AuthorizeParams) WithClientID(clientID string) *AuthorizeParams {
	o.SetClientID(clientID)
	return o
}

// SetClientID adds the clientId to the authorize params
func (o *AuthorizeParams) SetClientID(clientID string) {
	o.ClientID = clientID
}

// WithRedirectURI adds the redirectURI to the authorize params
func (o *AuthorizeParams) WithRedirectURI(redirectURI string) *AuthorizeParams {
	o.SetRedirectURI(redirectURI)
	return o
}

// SetRedirectURI adds the redirectUri to the authorize params
func (o *AuthorizeParams) SetRedirectURI(redirectURI string) {
	o.RedirectURI = redirectURI
}

// WithScope adds the scope to the authorize params
func (o *AuthorizeParams) WithScope(scope string) *AuthorizeParams {
	o.SetScope(scope)
	return o
}

// SetScope adds the scope to the authorize params
func (o *AuthorizeParams) SetScope(scope string) {
	o.Scope = scope
}

// WithState adds the state to the authorize params
func (o *AuthorizeParams) WithState(state string) *AuthorizeParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the authorize params
func (o *AuthorizeParams) SetState(state string) {
	o.State = state
}

// WriteToRequest writes these params to a swagger request
func (o *AuthorizeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param client_id
	qrClientID := o.ClientID
	qClientID := qrClientID
	if qClientID != "" {
		if err := r.SetQueryParam("client_id", qClientID); err != nil {
			return err
		}
	}

	// query param redirect_uri
	qrRedirectURI := o.RedirectURI
	qRedirectURI := qrRedirectURI
	if qRedirectURI != "" {
		if err := r.SetQueryParam("redirect_uri", qRedirectURI); err != nil {
			return err
		}
	}

	// query param scope
	qrScope := o.Scope
	qScope := qrScope
	if qScope != "" {
		if err := r.SetQueryParam("scope", qScope); err != nil {
			return err
		}
	}

	// query param state
	qrState := o.State
	qState := qrState
	if qState != "" {
		if err := r.SetQueryParam("state", qState); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
