// Code generated by go-swagger; DO NOT EDIT.

package oauth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// AuthorizeReader is a Reader for the Authorize structure.
type AuthorizeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AuthorizeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAuthorizeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewAuthorizeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAuthorizeOK creates a AuthorizeOK with default headers values
func NewAuthorizeOK() *AuthorizeOK {
	return &AuthorizeOK{}
}

/*AuthorizeOK handles this case with default header values.

Ok
*/
type AuthorizeOK struct {
}

func (o *AuthorizeOK) Error() string {
	return fmt.Sprintf("[GET /api/oauth/authorize][%d] authorizeOK ", 200)
}

func (o *AuthorizeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAuthorizeInternalServerError creates a AuthorizeInternalServerError with default headers values
func NewAuthorizeInternalServerError() *AuthorizeInternalServerError {
	return &AuthorizeInternalServerError{}
}

/*AuthorizeInternalServerError handles this case with default header values.

internal server error
*/
type AuthorizeInternalServerError struct {
	Payload string
}

func (o *AuthorizeInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/oauth/authorize][%d] authorizeInternalServerError  %+v", 500, o.Payload)
}

func (o *AuthorizeInternalServerError) GetPayload() string {
	return o.Payload
}

func (o *AuthorizeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
